// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peerseeds.proto

package com.mvc.crawler;


import com.google.protobuf.AbstractMessageLite;
import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.Parser;
import com.google.protobuf.RepeatedFieldBuilder;
import com.google.protobuf.UnknownFieldSet;

public final class PeerSeedProtos {
  private PeerSeedProtos() {}
  public static void registerAllExtensions(
      ExtensionRegistry registry) {
  }
  public interface PeerSeedDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.mvc.crawler.PeerSeedData)
          MessageOrBuilder {

    /**
     * <code>required string ip_address = 1;</code>
     */
    boolean hasIpAddress();
    /**
     * <code>required string ip_address = 1;</code>
     */
    String getIpAddress();
    /**
     * <code>required string ip_address = 1;</code>
     */
    ByteString
        getIpAddressBytes();

    /**
     * <code>required uint32 port = 2;</code>
     */
    boolean hasPort();
    /**
     * <code>required uint32 port = 2;</code>
     */
    int getPort();

    /**
     * <code>required uint32 services = 3;</code>
     */
    boolean hasServices();
    /**
     * <code>required uint32 services = 3;</code>
     */
    int getServices();
  }
  /**
   * Protobuf type {@code org.mvc.crawler.PeerSeedData}
   */
  public static final class PeerSeedData extends
      GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.mvc.crawler.PeerSeedData)
      PeerSeedDataOrBuilder {
    // Use PeerSeedData.newBuilder() to construct.
    private PeerSeedData(GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PeerSeedData(boolean noInit) { this.unknownFields = UnknownFieldSet.getDefaultInstance(); }

    private static final PeerSeedData defaultInstance;
    public static PeerSeedData getDefaultInstance() {
      return defaultInstance;
    }

    public PeerSeedData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final UnknownFieldSet unknownFields;
    @Override
    public final UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PeerSeedData(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      UnknownFieldSet.Builder unknownFields =
          UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              ipAddress_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              port_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              services_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final Descriptors.Descriptor
        getDescriptor() {
      return PeerSeedProtos.internal_static_org_bitcoin_crawler_PeerSeedData_descriptor;
    }

    protected GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return PeerSeedProtos.internal_static_org_bitcoin_crawler_PeerSeedData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              PeerSeedData.class, Builder.class);
    }

    public static Parser<PeerSeedData> PARSER =
        new AbstractParser<PeerSeedData>() {
      public PeerSeedData parsePartialFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws InvalidProtocolBufferException {
        return new PeerSeedData(input, extensionRegistry);
      }
    };

    @Override
    public Parser<PeerSeedData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int IP_ADDRESS_FIELD_NUMBER = 1;
    private Object ipAddress_;
    /**
     * <code>required string ip_address = 1;</code>
     */
    public boolean hasIpAddress() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string ip_address = 1;</code>
     */
    public String getIpAddress() {
      Object ref = ipAddress_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs =
            (ByteString) ref;
        String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ipAddress_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string ip_address = 1;</code>
     */
    public ByteString
        getIpAddressBytes() {
      Object ref = ipAddress_;
      if (ref instanceof String) {
        ByteString b =
            ByteString.copyFromUtf8(
                (String) ref);
        ipAddress_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    public static final int PORT_FIELD_NUMBER = 2;
    private int port_;
    /**
     * <code>required uint32 port = 2;</code>
     */
    public boolean hasPort() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 port = 2;</code>
     */
    public int getPort() {
      return port_;
    }

    public static final int SERVICES_FIELD_NUMBER = 3;
    private int services_;
    /**
     * <code>required uint32 services = 3;</code>
     */
    public boolean hasServices() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 services = 3;</code>
     */
    public int getServices() {
      return services_;
    }

    private void initFields() {
      ipAddress_ = "";
      port_ = 0;
      services_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIpAddress()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPort()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasServices()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getIpAddressBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, port_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, services_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += CodedOutputStream
          .computeBytesSize(1, getIpAddressBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += CodedOutputStream
          .computeUInt32Size(2, port_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += CodedOutputStream
          .computeUInt32Size(3, services_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static PeerSeedData parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static PeerSeedData parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static PeerSeedData parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static PeerSeedData parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static PeerSeedData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static PeerSeedData parseFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static PeerSeedData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static PeerSeedData parseDelimitedFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static PeerSeedData parseFrom(
        CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static PeerSeedData parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(PeerSeedData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.mvc.crawler.PeerSeedData}
     */
    public static final class Builder extends
        GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.mvc.crawler.PeerSeedData)
        PeerSeedDataOrBuilder {
      public static final Descriptors.Descriptor
          getDescriptor() {
        return PeerSeedProtos.internal_static_org_bitcoin_crawler_PeerSeedData_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return PeerSeedProtos.internal_static_org_bitcoin_crawler_PeerSeedData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                PeerSeedData.class, Builder.class);
      }

      // Construct using PeerSeedProtos.PeerSeedData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        ipAddress_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        port_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        services_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public Descriptors.Descriptor
          getDescriptorForType() {
        return PeerSeedProtos.internal_static_org_bitcoin_crawler_PeerSeedData_descriptor;
      }

      public PeerSeedData getDefaultInstanceForType() {
        return PeerSeedData.getDefaultInstance();
      }

      public PeerSeedData build() {
        PeerSeedData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public PeerSeedData buildPartial() {
        PeerSeedData result = new PeerSeedData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.ipAddress_ = ipAddress_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.port_ = port_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.services_ = services_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(Message other) {
        if (other instanceof PeerSeedData) {
          return mergeFrom((PeerSeedData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(PeerSeedData other) {
        if (other == PeerSeedData.getDefaultInstance()) return this;
        if (other.hasIpAddress()) {
          bitField0_ |= 0x00000001;
          ipAddress_ = other.ipAddress_;
          onChanged();
        }
        if (other.hasPort()) {
          setPort(other.getPort());
        }
        if (other.hasServices()) {
          setServices(other.getServices());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIpAddress()) {

          return false;
        }
        if (!hasPort()) {

          return false;
        }
        if (!hasServices()) {

          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        PeerSeedData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (InvalidProtocolBufferException e) {
          parsedMessage = (PeerSeedData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private Object ipAddress_ = "";
      /**
       * <code>required string ip_address = 1;</code>
       */
      public boolean hasIpAddress() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string ip_address = 1;</code>
       */
      public String getIpAddress() {
        Object ref = ipAddress_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            ipAddress_ = s;
          }
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>required string ip_address = 1;</code>
       */
      public ByteString
          getIpAddressBytes() {
        Object ref = ipAddress_;
        if (ref instanceof String) {
          ByteString b =
              ByteString.copyFromUtf8(
                  (String) ref);
          ipAddress_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <code>required string ip_address = 1;</code>
       */
      public Builder setIpAddress(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        ipAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string ip_address = 1;</code>
       */
      public Builder clearIpAddress() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ipAddress_ = getDefaultInstance().getIpAddress();
        onChanged();
        return this;
      }
      /**
       * <code>required string ip_address = 1;</code>
       */
      public Builder setIpAddressBytes(
          ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        ipAddress_ = value;
        onChanged();
        return this;
      }

      private int port_ ;
      /**
       * <code>required uint32 port = 2;</code>
       */
      public boolean hasPort() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 port = 2;</code>
       */
      public int getPort() {
        return port_;
      }
      /**
       * <code>required uint32 port = 2;</code>
       */
      public Builder setPort(int value) {
        bitField0_ |= 0x00000002;
        port_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 port = 2;</code>
       */
      public Builder clearPort() {
        bitField0_ = (bitField0_ & ~0x00000002);
        port_ = 0;
        onChanged();
        return this;
      }

      private int services_ ;
      /**
       * <code>required uint32 services = 3;</code>
       */
      public boolean hasServices() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 services = 3;</code>
       */
      public int getServices() {
        return services_;
      }
      /**
       * <code>required uint32 services = 3;</code>
       */
      public Builder setServices(int value) {
        bitField0_ |= 0x00000004;
        services_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 services = 3;</code>
       */
      public Builder clearServices() {
        bitField0_ = (bitField0_ & ~0x00000004);
        services_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.mvc.crawler.PeerSeedData)
    }

    static {
      defaultInstance = new PeerSeedData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.mvc.crawler.PeerSeedData)
  }

  public interface PeerSeedsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.mvc.crawler.PeerSeeds)
      MessageOrBuilder {

    /**
     * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
     */
    java.util.List<PeerSeedData>
        getSeedList();
    /**
     * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
     */
    PeerSeedData getSeed(int index);
    /**
     * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
     */
    int getSeedCount();
    /**
     * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
     */
    java.util.List<? extends PeerSeedDataOrBuilder>
        getSeedOrBuilderList();
    /**
     * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
     */
    PeerSeedDataOrBuilder getSeedOrBuilder(
            int index);

    /**
     * <code>required uint64 timestamp = 2;</code>
     *
     * <pre>
     * seconds since UNIX epoch
     * </pre>
     */
    boolean hasTimestamp();
    /**
     * <code>required uint64 timestamp = 2;</code>
     *
     * <pre>
     * seconds since UNIX epoch
     * </pre>
     */
    long getTimestamp();

    /**
     * <code>required string net = 3;</code>
     */
    boolean hasNet();
    /**
     * <code>required string net = 3;</code>
     */
    String getNet();
    /**
     * <code>required string net = 3;</code>
     */
    ByteString
        getNetBytes();
  }
  /**
   * Protobuf type {@code org.mvc.crawler.PeerSeeds}
   */
  public static final class PeerSeeds extends
      GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.mvc.crawler.PeerSeeds)
      PeerSeedsOrBuilder {
    // Use PeerSeeds.newBuilder() to construct.
    private PeerSeeds(GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PeerSeeds(boolean noInit) { this.unknownFields = UnknownFieldSet.getDefaultInstance(); }

    private static final PeerSeeds defaultInstance;
    public static PeerSeeds getDefaultInstance() {
      return defaultInstance;
    }

    public PeerSeeds getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final UnknownFieldSet unknownFields;
    @Override
    public final UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PeerSeeds(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      UnknownFieldSet.Builder unknownFields =
          UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                seed_ = new java.util.ArrayList<PeerSeedData>();
                mutable_bitField0_ |= 0x00000001;
              }
              seed_.add(input.readMessage(PeerSeedData.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              timestamp_ = input.readUInt64();
              break;
            }
            case 26: {
              ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              net_ = bs;
              break;
            }
          }
        }
      } catch (InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          seed_ = java.util.Collections.unmodifiableList(seed_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final Descriptors.Descriptor
        getDescriptor() {
      return PeerSeedProtos.internal_static_org_bitcoin_crawler_PeerSeeds_descriptor;
    }

    protected GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return PeerSeedProtos.internal_static_org_bitcoin_crawler_PeerSeeds_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              PeerSeeds.class, Builder.class);
    }

    public static Parser<PeerSeeds> PARSER =
        new AbstractParser<PeerSeeds>() {
      public PeerSeeds parsePartialFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws InvalidProtocolBufferException {
        return new PeerSeeds(input, extensionRegistry);
      }
    };

    @Override
    public Parser<PeerSeeds> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SEED_FIELD_NUMBER = 1;
    private java.util.List<PeerSeedData> seed_;
    /**
     * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
     */
    public java.util.List<PeerSeedData> getSeedList() {
      return seed_;
    }
    /**
     * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
     */
    public java.util.List<? extends PeerSeedDataOrBuilder>
        getSeedOrBuilderList() {
      return seed_;
    }
    /**
     * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
     */
    public int getSeedCount() {
      return seed_.size();
    }
    /**
     * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
     */
    public PeerSeedData getSeed(int index) {
      return seed_.get(index);
    }
    /**
     * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
     */
    public PeerSeedDataOrBuilder getSeedOrBuilder(
        int index) {
      return seed_.get(index);
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 2;
    private long timestamp_;
    /**
     * <code>required uint64 timestamp = 2;</code>
     *
     * <pre>
     * seconds since UNIX epoch
     * </pre>
     */
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 timestamp = 2;</code>
     *
     * <pre>
     * seconds since UNIX epoch
     * </pre>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int NET_FIELD_NUMBER = 3;
    private Object net_;
    /**
     * <code>required string net = 3;</code>
     */
    public boolean hasNet() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string net = 3;</code>
     */
    public String getNet() {
      Object ref = net_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs =
            (ByteString) ref;
        String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          net_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string net = 3;</code>
     */
    public ByteString
        getNetBytes() {
      Object ref = net_;
      if (ref instanceof String) {
        ByteString b =
            ByteString.copyFromUtf8(
                (String) ref);
        net_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    private void initFields() {
      seed_ = java.util.Collections.emptyList();
      timestamp_ = 0L;
      net_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTimestamp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNet()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSeedCount(); i++) {
        if (!getSeed(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < seed_.size(); i++) {
        output.writeMessage(1, seed_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(2, timestamp_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(3, getNetBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < seed_.size(); i++) {
        size += CodedOutputStream
          .computeMessageSize(1, seed_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += CodedOutputStream
          .computeUInt64Size(2, timestamp_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += CodedOutputStream
          .computeBytesSize(3, getNetBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static PeerSeeds parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static PeerSeeds parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static PeerSeeds parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static PeerSeeds parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static PeerSeeds parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static PeerSeeds parseFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static PeerSeeds parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static PeerSeeds parseDelimitedFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static PeerSeeds parseFrom(
        CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static PeerSeeds parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(PeerSeeds prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.mvc.crawler.PeerSeeds}
     */
    public static final class Builder extends
        GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.mvc.crawler.PeerSeeds)
        PeerSeedsOrBuilder {
      public static final Descriptors.Descriptor
          getDescriptor() {
        return PeerSeedProtos.internal_static_org_bitcoin_crawler_PeerSeeds_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return PeerSeedProtos.internal_static_org_bitcoin_crawler_PeerSeeds_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                PeerSeeds.class, Builder.class);
      }

      // Construct using PeerSeedProtos.PeerSeeds.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (GeneratedMessage.alwaysUseFieldBuilders) {
          getSeedFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (seedBuilder_ == null) {
          seed_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          seedBuilder_.clear();
        }
        timestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        net_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public Descriptors.Descriptor
          getDescriptorForType() {
        return PeerSeedProtos.internal_static_org_bitcoin_crawler_PeerSeeds_descriptor;
      }

      public PeerSeeds getDefaultInstanceForType() {
        return PeerSeeds.getDefaultInstance();
      }

      public PeerSeeds build() {
        PeerSeeds result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public PeerSeeds buildPartial() {
        PeerSeeds result = new PeerSeeds(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (seedBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            seed_ = java.util.Collections.unmodifiableList(seed_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.seed_ = seed_;
        } else {
          result.seed_ = seedBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.timestamp_ = timestamp_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.net_ = net_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(Message other) {
        if (other instanceof PeerSeeds) {
          return mergeFrom((PeerSeeds)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(PeerSeeds other) {
        if (other == PeerSeeds.getDefaultInstance()) return this;
        if (seedBuilder_ == null) {
          if (!other.seed_.isEmpty()) {
            if (seed_.isEmpty()) {
              seed_ = other.seed_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSeedIsMutable();
              seed_.addAll(other.seed_);
            }
            onChanged();
          }
        } else {
          if (!other.seed_.isEmpty()) {
            if (seedBuilder_.isEmpty()) {
              seedBuilder_.dispose();
              seedBuilder_ = null;
              seed_ = other.seed_;
              bitField0_ = (bitField0_ & ~0x00000001);
              seedBuilder_ =
                GeneratedMessage.alwaysUseFieldBuilders ?
                   getSeedFieldBuilder() : null;
            } else {
              seedBuilder_.addAllMessages(other.seed_);
            }
          }
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasNet()) {
          bitField0_ |= 0x00000004;
          net_ = other.net_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTimestamp()) {

          return false;
        }
        if (!hasNet()) {

          return false;
        }
        for (int i = 0; i < getSeedCount(); i++) {
          if (!getSeed(i).isInitialized()) {

            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        PeerSeeds parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (InvalidProtocolBufferException e) {
          parsedMessage = (PeerSeeds) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<PeerSeedData> seed_ =
        java.util.Collections.emptyList();
      private void ensureSeedIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          seed_ = new java.util.ArrayList<PeerSeedData>(seed_);
          bitField0_ |= 0x00000001;
         }
      }

      private RepeatedFieldBuilder<
                PeerSeedData, PeerSeedData.Builder, PeerSeedDataOrBuilder> seedBuilder_;

      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public java.util.List<PeerSeedData> getSeedList() {
        if (seedBuilder_ == null) {
          return java.util.Collections.unmodifiableList(seed_);
        } else {
          return seedBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public int getSeedCount() {
        if (seedBuilder_ == null) {
          return seed_.size();
        } else {
          return seedBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public PeerSeedData getSeed(int index) {
        if (seedBuilder_ == null) {
          return seed_.get(index);
        } else {
          return seedBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public Builder setSeed(
          int index, PeerSeedData value) {
        if (seedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSeedIsMutable();
          seed_.set(index, value);
          onChanged();
        } else {
          seedBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public Builder setSeed(
          int index, PeerSeedData.Builder builderForValue) {
        if (seedBuilder_ == null) {
          ensureSeedIsMutable();
          seed_.set(index, builderForValue.build());
          onChanged();
        } else {
          seedBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public Builder addSeed(PeerSeedData value) {
        if (seedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSeedIsMutable();
          seed_.add(value);
          onChanged();
        } else {
          seedBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public Builder addSeed(
          int index, PeerSeedData value) {
        if (seedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSeedIsMutable();
          seed_.add(index, value);
          onChanged();
        } else {
          seedBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public Builder addSeed(
          PeerSeedData.Builder builderForValue) {
        if (seedBuilder_ == null) {
          ensureSeedIsMutable();
          seed_.add(builderForValue.build());
          onChanged();
        } else {
          seedBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public Builder addSeed(
          int index, PeerSeedData.Builder builderForValue) {
        if (seedBuilder_ == null) {
          ensureSeedIsMutable();
          seed_.add(index, builderForValue.build());
          onChanged();
        } else {
          seedBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public Builder addAllSeed(
          Iterable<? extends PeerSeedData> values) {
        if (seedBuilder_ == null) {
          ensureSeedIsMutable();
          AbstractMessageLite.Builder.addAll(
              values, seed_);
          onChanged();
        } else {
          seedBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public Builder clearSeed() {
        if (seedBuilder_ == null) {
          seed_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          seedBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public Builder removeSeed(int index) {
        if (seedBuilder_ == null) {
          ensureSeedIsMutable();
          seed_.remove(index);
          onChanged();
        } else {
          seedBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public PeerSeedData.Builder getSeedBuilder(
          int index) {
        return getSeedFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public PeerSeedDataOrBuilder getSeedOrBuilder(
          int index) {
        if (seedBuilder_ == null) {
          return seed_.get(index);  } else {
          return seedBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public java.util.List<? extends PeerSeedDataOrBuilder>
           getSeedOrBuilderList() {
        if (seedBuilder_ != null) {
          return seedBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(seed_);
        }
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public PeerSeedData.Builder addSeedBuilder() {
        return getSeedFieldBuilder().addBuilder(
            PeerSeedData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public PeerSeedData.Builder addSeedBuilder(
          int index) {
        return getSeedFieldBuilder().addBuilder(
            index, PeerSeedData.getDefaultInstance());
      }
      /**
       * <code>repeated .org.mvc.crawler.PeerSeedData seed = 1;</code>
       */
      public java.util.List<PeerSeedData.Builder>
           getSeedBuilderList() {
        return getSeedFieldBuilder().getBuilderList();
      }
      private RepeatedFieldBuilder<
          PeerSeedData, PeerSeedData.Builder, PeerSeedDataOrBuilder>
          getSeedFieldBuilder() {
        if (seedBuilder_ == null) {
          seedBuilder_ = new RepeatedFieldBuilder<
              PeerSeedData, PeerSeedData.Builder, PeerSeedDataOrBuilder>(
                  seed_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          seed_ = null;
        }
        return seedBuilder_;
      }

      private long timestamp_ ;
      /**
       * <code>required uint64 timestamp = 2;</code>
       *
       * <pre>
       * seconds since UNIX epoch
       * </pre>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint64 timestamp = 2;</code>
       *
       * <pre>
       * seconds since UNIX epoch
       * </pre>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>required uint64 timestamp = 2;</code>
       *
       * <pre>
       * seconds since UNIX epoch
       * </pre>
       */
      public Builder setTimestamp(long value) {
        bitField0_ |= 0x00000002;
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 timestamp = 2;</code>
       *
       * <pre>
       * seconds since UNIX epoch
       * </pre>
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000002);
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private Object net_ = "";
      /**
       * <code>required string net = 3;</code>
       */
      public boolean hasNet() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string net = 3;</code>
       */
      public String getNet() {
        Object ref = net_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            net_ = s;
          }
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>required string net = 3;</code>
       */
      public ByteString
          getNetBytes() {
        Object ref = net_;
        if (ref instanceof String) {
          ByteString b =
              ByteString.copyFromUtf8(
                  (String) ref);
          net_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <code>required string net = 3;</code>
       */
      public Builder setNet(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        net_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string net = 3;</code>
       */
      public Builder clearNet() {
        bitField0_ = (bitField0_ & ~0x00000004);
        net_ = getDefaultInstance().getNet();
        onChanged();
        return this;
      }
      /**
       * <code>required string net = 3;</code>
       */
      public Builder setNetBytes(
          ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        net_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.mvc.crawler.PeerSeeds)
    }

    static {
      defaultInstance = new PeerSeeds(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.mvc.crawler.PeerSeeds)
  }

  public interface SignedPeerSeedsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.mvc.crawler.SignedPeerSeeds)
      MessageOrBuilder {

    /**
     * <code>required bytes peer_seeds = 1;</code>
     */
    boolean hasPeerSeeds();
    /**
     * <code>required bytes peer_seeds = 1;</code>
     */
    ByteString getPeerSeeds();

    /**
     * <code>required bytes signature = 2;</code>
     */
    boolean hasSignature();
    /**
     * <code>required bytes signature = 2;</code>
     */
    ByteString getSignature();

    /**
     * <code>required bytes pubkey = 3;</code>
     */
    boolean hasPubkey();
    /**
     * <code>required bytes pubkey = 3;</code>
     */
    ByteString getPubkey();
  }
  /**
   * Protobuf type {@code org.mvc.crawler.SignedPeerSeeds}
   */
  public static final class SignedPeerSeeds extends
      GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.mvc.crawler.SignedPeerSeeds)
      SignedPeerSeedsOrBuilder {
    // Use SignedPeerSeeds.newBuilder() to construct.
    private SignedPeerSeeds(GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SignedPeerSeeds(boolean noInit) { this.unknownFields = UnknownFieldSet.getDefaultInstance(); }

    private static final SignedPeerSeeds defaultInstance;
    public static SignedPeerSeeds getDefaultInstance() {
      return defaultInstance;
    }

    public SignedPeerSeeds getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final UnknownFieldSet unknownFields;
    @Override
    public final UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SignedPeerSeeds(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      UnknownFieldSet.Builder unknownFields =
          UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              peerSeeds_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              signature_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              pubkey_ = input.readBytes();
              break;
            }
          }
        }
      } catch (InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final Descriptors.Descriptor
        getDescriptor() {
      return PeerSeedProtos.internal_static_org_bitcoin_crawler_SignedPeerSeeds_descriptor;
    }

    protected GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return PeerSeedProtos.internal_static_org_bitcoin_crawler_SignedPeerSeeds_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SignedPeerSeeds.class, Builder.class);
    }

    public static Parser<SignedPeerSeeds> PARSER =
        new AbstractParser<SignedPeerSeeds>() {
      public SignedPeerSeeds parsePartialFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws InvalidProtocolBufferException {
        return new SignedPeerSeeds(input, extensionRegistry);
      }
    };

    @Override
    public Parser<SignedPeerSeeds> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PEER_SEEDS_FIELD_NUMBER = 1;
    private ByteString peerSeeds_;
    /**
     * <code>required bytes peer_seeds = 1;</code>
     */
    public boolean hasPeerSeeds() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes peer_seeds = 1;</code>
     */
    public ByteString getPeerSeeds() {
      return peerSeeds_;
    }

    public static final int SIGNATURE_FIELD_NUMBER = 2;
    private ByteString signature_;
    /**
     * <code>required bytes signature = 2;</code>
     */
    public boolean hasSignature() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bytes signature = 2;</code>
     */
    public ByteString getSignature() {
      return signature_;
    }

    public static final int PUBKEY_FIELD_NUMBER = 3;
    private ByteString pubkey_;
    /**
     * <code>required bytes pubkey = 3;</code>
     */
    public boolean hasPubkey() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bytes pubkey = 3;</code>
     */
    public ByteString getPubkey() {
      return pubkey_;
    }

    private void initFields() {
      peerSeeds_ = ByteString.EMPTY;
      signature_ = ByteString.EMPTY;
      pubkey_ = ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPeerSeeds()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSignature()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPubkey()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, peerSeeds_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, signature_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, pubkey_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += CodedOutputStream
          .computeBytesSize(1, peerSeeds_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += CodedOutputStream
          .computeBytesSize(2, signature_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += CodedOutputStream
          .computeBytesSize(3, pubkey_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SignedPeerSeeds parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignedPeerSeeds parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignedPeerSeeds parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SignedPeerSeeds parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SignedPeerSeeds parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignedPeerSeeds parseFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SignedPeerSeeds parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SignedPeerSeeds parseDelimitedFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SignedPeerSeeds parseFrom(
        CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SignedPeerSeeds parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SignedPeerSeeds prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.mvc.crawler.SignedPeerSeeds}
     */
    public static final class Builder extends
        GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.mvc.crawler.SignedPeerSeeds)
        SignedPeerSeedsOrBuilder {
      public static final Descriptors.Descriptor
          getDescriptor() {
        return PeerSeedProtos.internal_static_org_bitcoin_crawler_SignedPeerSeeds_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return PeerSeedProtos.internal_static_org_bitcoin_crawler_SignedPeerSeeds_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SignedPeerSeeds.class, Builder.class);
      }

      // Construct using PeerSeedProtos.SignedPeerSeeds.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        peerSeeds_ = ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        signature_ = ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        pubkey_ = ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public Descriptors.Descriptor
          getDescriptorForType() {
        return PeerSeedProtos.internal_static_org_bitcoin_crawler_SignedPeerSeeds_descriptor;
      }

      public SignedPeerSeeds getDefaultInstanceForType() {
        return SignedPeerSeeds.getDefaultInstance();
      }

      public SignedPeerSeeds build() {
        SignedPeerSeeds result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SignedPeerSeeds buildPartial() {
        SignedPeerSeeds result = new SignedPeerSeeds(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.peerSeeds_ = peerSeeds_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.signature_ = signature_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.pubkey_ = pubkey_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(Message other) {
        if (other instanceof SignedPeerSeeds) {
          return mergeFrom((SignedPeerSeeds)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SignedPeerSeeds other) {
        if (other == SignedPeerSeeds.getDefaultInstance()) return this;
        if (other.hasPeerSeeds()) {
          setPeerSeeds(other.getPeerSeeds());
        }
        if (other.hasSignature()) {
          setSignature(other.getSignature());
        }
        if (other.hasPubkey()) {
          setPubkey(other.getPubkey());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPeerSeeds()) {

          return false;
        }
        if (!hasSignature()) {

          return false;
        }
        if (!hasPubkey()) {

          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SignedPeerSeeds parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (InvalidProtocolBufferException e) {
          parsedMessage = (SignedPeerSeeds) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private ByteString peerSeeds_ = ByteString.EMPTY;
      /**
       * <code>required bytes peer_seeds = 1;</code>
       */
      public boolean hasPeerSeeds() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes peer_seeds = 1;</code>
       */
      public ByteString getPeerSeeds() {
        return peerSeeds_;
      }
      /**
       * <code>required bytes peer_seeds = 1;</code>
       */
      public Builder setPeerSeeds(ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        peerSeeds_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes peer_seeds = 1;</code>
       */
      public Builder clearPeerSeeds() {
        bitField0_ = (bitField0_ & ~0x00000001);
        peerSeeds_ = getDefaultInstance().getPeerSeeds();
        onChanged();
        return this;
      }

      private ByteString signature_ = ByteString.EMPTY;
      /**
       * <code>required bytes signature = 2;</code>
       */
      public boolean hasSignature() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bytes signature = 2;</code>
       */
      public ByteString getSignature() {
        return signature_;
      }
      /**
       * <code>required bytes signature = 2;</code>
       */
      public Builder setSignature(ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        signature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes signature = 2;</code>
       */
      public Builder clearSignature() {
        bitField0_ = (bitField0_ & ~0x00000002);
        signature_ = getDefaultInstance().getSignature();
        onChanged();
        return this;
      }

      private ByteString pubkey_ = ByteString.EMPTY;
      /**
       * <code>required bytes pubkey = 3;</code>
       */
      public boolean hasPubkey() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bytes pubkey = 3;</code>
       */
      public ByteString getPubkey() {
        return pubkey_;
      }
      /**
       * <code>required bytes pubkey = 3;</code>
       */
      public Builder setPubkey(ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        pubkey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes pubkey = 3;</code>
       */
      public Builder clearPubkey() {
        bitField0_ = (bitField0_ & ~0x00000004);
        pubkey_ = getDefaultInstance().getPubkey();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.mvc.crawler.SignedPeerSeeds)
    }

    static {
      defaultInstance = new SignedPeerSeeds(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.mvc.crawler.SignedPeerSeeds)
  }

  private static final Descriptors.Descriptor
    internal_static_org_bitcoin_crawler_PeerSeedData_descriptor;
  private static
    GeneratedMessage.FieldAccessorTable
      internal_static_org_bitcoin_crawler_PeerSeedData_fieldAccessorTable;
  private static final Descriptors.Descriptor
    internal_static_org_bitcoin_crawler_PeerSeeds_descriptor;
  private static
    GeneratedMessage.FieldAccessorTable
      internal_static_org_bitcoin_crawler_PeerSeeds_fieldAccessorTable;
  private static final Descriptors.Descriptor
    internal_static_org_bitcoin_crawler_SignedPeerSeeds_descriptor;
  private static
    GeneratedMessage.FieldAccessorTable
      internal_static_org_bitcoin_crawler_SignedPeerSeeds_fieldAccessorTable;

  public static Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\017peerseeds.proto\022\023org.mvc.crawler\"B" +
      "\n\014PeerSeedData\022\022\n\nip_address\030\001 \002(\t\022\014\n\004po" +
      "rt\030\002 \002(\r\022\020\n\010services\030\003 \002(\r\"\\\n\tPeerSeeds\022" +
      "/\n\004seed\030\001 \003(\0132!.org.mvc.crawler.Peer" +
      "SeedData\022\021\n\ttimestamp\030\002 \002(\004\022\013\n\003net\030\003 \002(\t" +
      "\"H\n\017SignedPeerSeeds\022\022\n\npeer_seeds\030\001 \002(\014\022" +
      "\021\n\tsignature\030\002 \002(\014\022\016\n\006pubkey\030\003 \002(\014B%\n\023or" +
      "g.mvc.crawlerB\016PeerSeedProtos"
    };
    Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public ExtensionRegistry assignDescriptors(
              Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_org_bitcoin_crawler_PeerSeedData_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_bitcoin_crawler_PeerSeedData_fieldAccessorTable = new
      GeneratedMessage.FieldAccessorTable(
        internal_static_org_bitcoin_crawler_PeerSeedData_descriptor,
        new String[] { "IpAddress", "Port", "Services", });
    internal_static_org_bitcoin_crawler_PeerSeeds_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_bitcoin_crawler_PeerSeeds_fieldAccessorTable = new
      GeneratedMessage.FieldAccessorTable(
        internal_static_org_bitcoin_crawler_PeerSeeds_descriptor,
        new String[] { "Seed", "Timestamp", "Net", });
    internal_static_org_bitcoin_crawler_SignedPeerSeeds_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_bitcoin_crawler_SignedPeerSeeds_fieldAccessorTable = new
      GeneratedMessage.FieldAccessorTable(
        internal_static_org_bitcoin_crawler_SignedPeerSeeds_descriptor,
        new String[] { "PeerSeeds", "Signature", "Pubkey", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
